
stages:
  - build
  - publish
  - release

.init_git_bot_template: &init_git_bot
  # Install ssh-agent if not already installed, it is required by Docker.
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - echo "${BOT_SSH_PRIVATE_KEY}" | ssh-add -

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  - git config --global user.name "${BOT_GIT_NAME}"
  - git config --global user.email "${BOT_GIT_EMAIL}"

  - git remote set-url --push origin "${CI_PUSH_REPO}"

.auto_release: &auto_release_template
  stage: release
  image: registry.gitlab.com/lowl/node-testing:latest
  variable:
    CI_PUSH_REPO: "git@gitlab.com:pdcst/client.git"
  before_script: *init_git_bot
  only:
    - master
  when: manual
  tags:
    - docker

major-release:
  <<: *auto_release_template
  script:
    - npm version major
    #
    - git push origin master
    - git push origin --tags

minor-release:
  <<: *auto_release_template
  script:
    - npm version minor
    #
    - git push origin master
    - git push origin --tags

minor-release:
  <<: *auto_release_template
  script:
    - npm version patch
    #
    - git push origin master
    - git push origin --tags
